//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WPFcliente.srAutor {
    using System.Data;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="srAutor.AutorSoap")]
    public interface AutorSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Listar", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet Listar();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Listar", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> ListarAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Agregar", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string Agregar(string codAutor, string apellidos, string nombres, string nacionalidad);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Agregar", ReplyAction="*")]
        System.Threading.Tasks.Task<string> AgregarAsync(string codAutor, string apellidos, string nombres, string nacionalidad);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Eliminar", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string Eliminar(string codAutor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Eliminar", ReplyAction="*")]
        System.Threading.Tasks.Task<string> EliminarAsync(string codAutor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Actualizar", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string Actualizar(string codAutor, string apellidos, string nombres, string nacionalidad);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Actualizar", ReplyAction="*")]
        System.Threading.Tasks.Task<string> ActualizarAsync(string codAutor, string apellidos, string nombres, string nacionalidad);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Buscar", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet Buscar(string parametro, string texto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Buscar", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> BuscarAsync(string parametro, string texto);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface AutorSoapChannel : WPFcliente.srAutor.AutorSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AutorSoapClient : System.ServiceModel.ClientBase<WPFcliente.srAutor.AutorSoap>, WPFcliente.srAutor.AutorSoap {
        
        public AutorSoapClient() {
        }
        
        public AutorSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AutorSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AutorSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AutorSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Data.DataSet Listar() {
            return base.Channel.Listar();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> ListarAsync() {
            return base.Channel.ListarAsync();
        }
        
        public string Agregar(string codAutor, string apellidos, string nombres, string nacionalidad) {
            return base.Channel.Agregar(codAutor, apellidos, nombres, nacionalidad);
        }
        
        public System.Threading.Tasks.Task<string> AgregarAsync(string codAutor, string apellidos, string nombres, string nacionalidad) {
            return base.Channel.AgregarAsync(codAutor, apellidos, nombres, nacionalidad);
        }
        
        public string Eliminar(string codAutor) {
            return base.Channel.Eliminar(codAutor);
        }
        
        public System.Threading.Tasks.Task<string> EliminarAsync(string codAutor) {
            return base.Channel.EliminarAsync(codAutor);
        }
        
        public string Actualizar(string codAutor, string apellidos, string nombres, string nacionalidad) {
            return base.Channel.Actualizar(codAutor, apellidos, nombres, nacionalidad);
        }
        
        public System.Threading.Tasks.Task<string> ActualizarAsync(string codAutor, string apellidos, string nombres, string nacionalidad) {
            return base.Channel.ActualizarAsync(codAutor, apellidos, nombres, nacionalidad);
        }
        
        public System.Data.DataSet Buscar(string parametro, string texto) {
            return base.Channel.Buscar(parametro, texto);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> BuscarAsync(string parametro, string texto) {
            return base.Channel.BuscarAsync(parametro, texto);
        }
    }
}
